USE swiggy;

SELECT name, city FROM Customers
WHERE city = 'delhi';

SELECT AVG(rating) AS average_rating
FROM Restaurants
WHERE city = 'Mumbai';



-- List all customers who have placed at least one order.

SELECT DISTINCT c.name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id;


--Display the total number of orders placed by each customer.

SELECT c.name, COUNT(o.order_id) AS total_orders
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.name;

--Find the total revenue generated by each restaurant.
SELECT r.name AS restaurant_name, COALESCE(SUM(o.total_amount), 0) AS total_revenue
FROM Restaurants r
LEFT JOIN Orders o ON o.restaurant_id = r.restaurant_id
GROUP BY r.name;

--Find the top 5 restaurants with the highest average rating.
SELECT TOP 5 name, ROUND(AVG(rating), 1) AS Average_rating
FROM Restaurants
GROUP BY name
ORDER BY Average_rating DESC;

--Display all customers who have never placed an order.
SELECT c.name 
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;


--Find the delivery partner who has worked with the most different customers.

SELECT TOP 1
    deliverypartners.partner_id,
    deliverypartners.name,
    COUNT(DISTINCT orders.customer_id) AS distinct_customers
FROM
    deliverypartners
JOIN
    orderdelivery ON deliverypartners.partner_id = orderdelivery.partner_id
JOIN
    orders ON orderdelivery.order_id = orders.order_id
GROUP BY
    deliverypartners.partner_id, deliverypartners.name
ORDER BY
    distinct_customers DESC;




-- Find the number of orders placed by each customer in 'Mumbai'.
SELECT c.name, c.city, COUNT(o.order_id) AS total_orders
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE c.city = 'Mumbai'
GROUP BY c.name, c.city;

--Display all orders placed in the last 30 days.
SELECT TOP 30 order_id, order_date
FROM Orders
WHERE order_date >= DATEADD(DAY, -30, '2024-08-15')
ORDER BY order_date DESC;


--List all delivery partners who have completed more than 1 delivery
SELECT deliverypartners.name, count(orderdelivery.order_id) AS total_deliveries
FROM deliverypartners
JOIN orderdelivery
ON deliverypartners.partner_id=orderdelivery.partner_id
group by deliverypartners.NAME
having count(orderdelivery.order_ID)>1;

-- Find the customers who have placed orders on exactly three different days.
SELECT c.name, COUNT(DISTINCT o.order_date) AS different_days
FROM Customers c
JOIN Orders o ON o.customer_id = c.customer_id
GROUP BY c.name
HAVING COUNT(DISTINCT o.order_date) = 3;



-- Identify customers who have the same city and have placed orders at the same restaurants, but on different dates.
SELECT DISTINCT
    c1.name AS Customer1Name,
    c1.city,
    c2.name AS Customer2Name,
    c2.city,
    r.name AS RestaurantName
FROM
    orders AS o1
JOIN
    orders AS o2 ON o1.restaurant_id = o2.restaurant_id
JOIN
    customers AS c1 ON o1.customer_id = c1.customer_id
JOIN
    customers AS c2 ON o2.customer_id = c2.customer_id
JOIN
    Restaurants AS r ON r.restaurant_id = o1.restaurant_id
WHERE
    c1.city = c2.city
    AND o1.order_date != o2.order_date
    AND c1.customer_id < c2.customer_id;







